import json
import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums.chat_type import ChatType

from elements.kb import main_menu_kb
from functions.greeting import send_greeting

router = Router()

MAX_MESSAGE_LENGTH = 4096


def split_text(text, max_length):
    chunks = []
    while len(text) > max_length:
        split_index = text.rfind('\n\n', 0, max_length)
        if split_index == -1:
            split_index = max_length
        chunks.append(text[:split_index])
        text = text[split_index:]
    chunks.append(text)
    return chunks


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("start", "schedule"))
async def start_cmd(message: Message):
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø—ã
    if message.chat.type == ChatType.GROUP or message.chat.type == ChatType.SUPERGROUP:
        return

    await message.answer(
        text=f"{send_greeting(username=message.from_user.username)}\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –ö–ò–ü–§–ò–ù!\n\n–ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç –∏–ª–∏ –∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb()
    )


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("info"))
async def info_cmd(message: Message):
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø—ã
    if message.chat.type == ChatType.GROUP or message.chat.type == ChatType.SUPERGROUP:
        return

    try:
        with open('assets/questions.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        questions_and_answers = data["questions_and_answers"]
        
        faq_list = []
        for index, qa in enumerate(questions_and_answers, start=1):
            question = qa["question"]
            answer = qa["answer"]
            faq_list.append(f"<code>{index}. –í–æ–ø—Ä–æ—Å:</code>\n<i>{question}</i>\n<code>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</code>\n<i>{answer}</i>\n")
        
        faq_text = "\n\n".join(faq_list)

        text_chunks = split_text(faq_text, MAX_MESSAGE_LENGTH)
        for chunk in text_chunks:
            await message.answer(text=chunk)

    except Exception as _ex:
        logging.error(_ex)
        await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ß–∞–í–æ ü•∫.")
