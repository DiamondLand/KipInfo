import json
import psutil
import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hlink

from elements.kb import main_menu_kb

from functions.utilities import split_text
from functions.greeting import send_greeting

from database.services import get_users_service, get_or_create_user_service

from events.states_group import InsertMailingText

router = Router()

MAX_MESSAGE_LENGTH = 4096


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    try:
        await get_or_create_user_service(user_id=message.from_user.id)
    except Exception as _ex:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç! {_ex}")

    try:
        with open('assets/questions.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        questions_and_answers = data['questions_and_answers']

        await message.answer(text=f"{send_greeting(username=message.from_user.username)}\n<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –ö–ò–ü–§–ò–ù!</b>\n\n{questions_and_answers[1]['answer']}")
    except Exception as _e:
        logging.error(_e)

    await message.answer(
        text=f"<i>* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ {hlink('K–ò–ü–§–ò–ù | –û–±—â–µ–Ω–∏–µ', 'https://t.me/KipFinchikBot')}. –ù–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –ø—Ä–∏—è—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ c –∞–±–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º–∏, –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ <u>–ö–ò–ü–§–ò–ù</u>, <u>–ú–§–ö</u>, <u>–ª–∏—Ü–µ–µ–º</u> –∂–¥—É—Ç –≤–∞—Å üí™üíñ!"
    )
    await message.answer(
        text=f"–ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç, –ª–∏–±–æ –∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb()
    )


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("info"))
async def info_cmd(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    try:
        with open('assets/questions.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        questions_and_answers = data['questions_and_answers']

        faq_list = []
        for index, qa in enumerate(questions_and_answers, start=1):
            faq_list.append(
                f"<code>{index}. –í–æ–ø—Ä–æ—Å:</code>\n<i>{qa['question']}</i>\n<code>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:</code>\n<i>{qa['answer']}</i>\n")

        faq_text = "\n\n".join(faq_list)

        text_chunks = split_text(faq_text, MAX_MESSAGE_LENGTH)
        for chunk in text_chunks:
            await message.answer(text=chunk)
    except Exception as _ex:
        logging.error(_ex)
        await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ß–∞–í–æ ü•∫.")


# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ --- #
@router.message(Command("statistic", "bin"))
async def statistic_cmd(message: Message, state: FSMContext):
    if int(message.from_user.id) not in map(int, [767922691, 872278858]):
        return

    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    users_count = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(await get_users_service())}</code>"
    await message.answer(text=f"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\
                            \n\n{users_count}\
                            \n\n<b>CPU:</b> <code>{psutil.cpu_percent(interval=1)}</code> | <b>RAM:</b> <code>{psutil.virtual_memory().percent}</code>%\
                            \n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:</b> <code>{psutil.disk_usage('/').percent}</code>%"
    )


# --- –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫—É -> –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç --- #
@router.message(Command("mailing", "bin2"))
async def mailing_cmd(message: Message, state: FSMContext):
    if int(message.from_user.id) not in map(int, [767922691, 872278858]):
        return

    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await message.answer(text="üí• –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(InsertMailingText.text)
